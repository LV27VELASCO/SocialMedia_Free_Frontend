---
import { useI18n } from '../i18n';
const { translate, currentLang } = useI18n(Astro);
const steps: readonly string[] = translate('unsubscribe.success.steps') as readonly string[];
---

<!-- Main Content -->
<section class="relative px-4 sm:px-10 py-20 lg:py-24">
    <div class="container mx-auto px-4 sm:px-6 max-w-4xl">
        <input id="lang" type="hidden" value={currentLang}>
        <!-- Page Header -->
        <div class="text-center mb-8 animate-fade-in">
            <h1 class="text-4xl sm:text-5xl lg:text-6xl font-bold text-white mb-6">
                üìß <span class="gradient-text">{translate('unsubscribe.title')}</span>
            </h1>
            <p class="text-xl text-gray-300 max-w-3xl mx-auto mb-8">
                {translate('unsubscribe.subtitle1')}
            </p>
            <p class="text-xl text-gray-300 max-w-3xl mx-auto">
                {translate('unsubscribe.subtitle2')}
            </p>
        </div>

        <!-- Main Form Container -->
        <div class="unsubscribe-card rounded-2xl p-8 animate-slide-up">
            <!-- Step 1: Email Verification -->
            <div id="step-email" class="step-container">
                <div class="text-center mb-8">
                    <div class="text-6xl mb-4">üìÆ</div>
                    <h2 class="text-2xl font-bold text-white mb-4">
                        {translate('unsubscribe.form.title')}
                    </h2>
                    <p class="text-gray-300">
                        {translate('unsubscribe.form.text')}
                    </p>
                </div>

                <form id="unsuscribe-form" class="space-y-6">
                    <div>
                        <label for="email" class="block text-white font-medium mb-2">
                            üìß {translate('unsubscribe.email.label')}
                        </label>
                        <input type="email" id="email" name="email" autocomplete="off" required
                            placeholder="JohnDoe@email.com"
                            class="w-full px-4 py-3 bg-white/20 bg-opacity-10 border border-white border-opacity-20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300" />
                        <div id="email-error" class="hidden text-red-300 text-sm mt-2">
                        </div>
                    </div>
                    <!-- Error Message -->
                    <p id="message2" class="text-center text-sm mt-2"></p>
                    <button type="submit"
                        class="w-full px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white font-semibold rounded-xl hover:scale-105 transform transition-all duration-300 flex items-center justify-center space-x-2 outline-none">
                        <span>{translate('unsubscribe.form.button')}</span>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Loader -->
    <div id="loaderModal"
        class="hidden opacity-0 fixed inset-0 z-[70] flex items-center justify-center bg-black/70 backdrop-blur-sm transition-opacity duration-200"
        role="dialog" aria-modal="true" aria-labelledby="loaderTitle">
        <div class="mx-4 w-full max-w-sm rounded-2xl border border-white/20 bg-white/10 p-6 text-center shadow-xl">
            <div
                class="mx-auto mb-4 h-12 w-12 rounded-full border-4 border-blue-400/40 border-t-transparent animate-spin">
            </div>
            <h2 id="loaderTitle" class="text-white text-lg font-semibold mb-1">
                {translate('unsubscribe.loader.title')}
            </h2>
            <p data-loader-text class="text-gray-200 text-sm">
                {translate('unsubscribe.loader.text')}
            </p>
        </div>
    </div>
</section>

<div id="success-unsuscribe" class="hidden fixed inset-0 z-[60] flex items-center justify-center bg-black/50 backdrop-blur-sm">
    <div class="mx-4 w-full max-w-2xl h-[90%] overflow-y-scroll bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 p-8 animate-scale-in">
        <!-- Added close button in top-right corner -->
        <button onclick="closeModal()"
            class="close-button absolute top-4 right-4 w-10 h-10 flex items-center justify-center rounded-full bg-white/10 hover:bg-red-500/20 border border-white/20 hover:border-red-400 text-white hover:text-red-400 text-xl font-bold transition-all z-10"
            aria-label="Cerrar modal">
            √ó
        </button>

        <div class="step-container">
            <div class="text-center">
                <div class="text-8xl mb-6 success-animation">‚úÖ</div>
                <h2 class="text-3xl font-bold text-white mb-4">
                    {translate('unsubscribe.success.title')}
                </h2>
                <p class="text-xl text-gray-300 mb-8">
                    {translate('unsubscribe.success.text')}
                </p>

                <!-- What happens next -->
                <div class="bg-blue-500/20 border border-blue-500/30 rounded-xl p-6 mb-8">
                    <h3 class="text-lg font-semibold text-blue-200 mb-3">
                        üîÆ {translate('unsubscribe.success.subtitle')}
                    </h3>
                    <ul class="text-blue-300 text-sm space-y-2 text-left">
                        {
                            steps.map((item)=>(
                              <li>‚Ä¢ {item}</li>
                            ))
                        }
                    </ul>
                </div>

                <!-- Action Buttons -->
                <div class="flex flex-col sm:flex-row gap-4">
                    <a href={`/${currentLang}/`}
                        class="flex-1 px-6 py-3 flex items-center justify-center bg-gradient-to-r from-blue-500 to-purple-500 text-white font-semibold rounded-xl hover:scale-105 transform transition-all duration-300">
                        üè† {translate('unsubscribe.success.home')}
                    </a>
                    <a href={`/${currentLang}/prices`}
                        class="flex-1 px-6 py-3 bg-green-400/50 text-white font-semibold rounded-xl hover:bg-green-400/70 transition-all duration-300">
                        üîÑ {translate('unsubscribe.success.reactive')}
                    </a>
                </div>

                <!-- Contact Support -->
                <div class="mt-8 pt-6 border-t border-white/20">
                    <p class="text-gray-400 text-sm mb-4">
                        {translate('unsubscribe.success.contact.title')}
                    </p>
                    <button onclick="contactSupport()"
                        class="px-4 py-2 bg-white/10 text-white rounded-lg hover:bg-opacity-20 transition-colors">
                        üí¨ {translate('unsubscribe.success.contact.button')}
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>




<!-- JavaScript -->
<script>

    const MESSAGES: Record<string, Record<string, string>> = {
        email_required: {
            es: "Email obligatorio",
            en: "Email is required",
            fr: "Email requis",
            pt: "Email obrigat√≥rio",
            de: "E-Mail ist erforderlich"
        },
        processing: {
            es: "Procesando...",
            en: "Processing...",
            fr: "Traitement...",
            pt: "Processando...",
            de: "Wird verarbeitet..."
        },
        token_error: {
            es: "Ocurri√≥ un error, intentarlo m√°s tarde",
            en: "An error occurred, please try later",
            fr: "Une erreur est survenue, veuillez r√©essayer plus tard",
            pt: "Ocorreu um erro, tente novamente mais tarde",
            de: "Ein Fehler ist aufgetreten, bitte versuchen Sie es sp√§ter erneut"
        }
    };

    window.addEventListener('load', () => {

        const form = document.getElementById("unsuscribe-form");
        const language = document.getElementById("lang") as HTMLInputElement;

        if (!form) return; // Evita el error de null

        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            const emailInput = document.getElementById("email") as HTMLInputElement;

            // Show loading state
            const button = document.querySelector<HTMLButtonElement>('button[type="submit"]');
            const messageEl = document.getElementById("message2");

            if (!button||!messageEl) return;

            showLoader();
            const originalText = button.innerHTML;
            button.innerHTML =
                `<span class="flex items-center justify-center space-x-2">
                    <span class="animate-spin">‚è≥</span>
                    <span>${getMessage("processing", language.value)}</span>
                </span>`;
            button.disabled = true;

            if(!emailInput.value){
                messageEl.textContent = getMessage("email_required", language.value);
                messageEl.className =
                    "text-red-300 text-center text-sm bg-red-500/20 p-4 rounded-xl border border-red-400/30";
                button.innerHTML = originalText;
                button.disabled = false;
                hideLoader();
                return;
            }

            const res = await unsubscribe_api(originalText, emailInput.value, language.value);
        });
    })


    async function getToken() {
        const res = await fetch(`${import.meta.env.PUBLIC_API}/token`);

        if (!res.ok) {
            return false
        }

        const data = await res.json();
        return data.token; // O la propiedad que te env√≠e el token
    }


    async function unsubscribe_api(originalText:string, data_email:any, language:string) {
        const token = await getToken();
        const button = document.querySelector<HTMLButtonElement>('button[type="submit"]');
        const SuccessElement = document.getElementById('success-unsuscribe');
        const messageEl = document.getElementById("message2");
        if (!button ||!messageEl) return;

        if (!token) {
            messageEl.textContent = getMessage("token_error", language);
            messageEl.className =
                "text-red-300 text-center text-sm bg-red-500/20 p-4 rounded-xl border border-red-400/30";
            button.innerHTML = originalText;
            button.disabled = false;
            hideLoader();
            return;
        }


        const res = await fetch(
            `${import.meta.env.PUBLIC_API}/unsuscribe`,
            {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({
                    email: data_email,
                    locale:language.trim()
                }),
            },
        );
        const data = await res.json();
        if (!res.ok) {
            messageEl.textContent = data.message;
            messageEl.className =
                "text-red-300 text-center text-sm bg-red-500/20 p-4 rounded-xl border border-red-400/30";
            button.innerHTML = originalText;
            button.disabled = false;
            hideLoader();
            return;
        }

        if (data.error) {
            messageEl.textContent = data.message;
            messageEl.className =
                "text-red-300 text-center text-sm bg-red-500/20 p-4 rounded-xl border border-red-400/30";
            button.innerHTML = originalText;
            button.disabled = false;
            hideLoader();
            return;
        } else {
            SuccessElement?.classList.remove("hidden")
            button.innerHTML = originalText;
            button.disabled = false;
            hideLoader();
        }
    }

    
    function showLoader() {
        const modal = document.getElementById("loaderModal") as HTMLDivElement;

        modal.classList.remove("hidden");
        requestAnimationFrame(() => {
            modal.classList.remove("opacity-0");
        });

        // Bloquea el scroll de fondo
        document.body.classList.add("overflow-hidden");
    }

    function hideLoader() {
        const modal = document.getElementById("loaderModal") as HTMLDivElement;
        modal.classList.add("opacity-0");
        setTimeout(() => {
            modal.classList.add("hidden");
            document.body.classList.remove("overflow-hidden");
        }, 200); // sincronizado con transition-opacity
    }

    function getMessage(key: string, locale: string = "es"): string {
        return MESSAGES[key]?.[locale] || MESSAGES[key]?.["en"] || "";
    }
    
</script>

<script is:inline>
// Funci√≥n para cerrar el modal de seguidores
    function closeModal() {
        document.getElementById('success-unsuscribe').classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
        // Reset form
        document.getElementById('unsuscribe-form').reset();
    }
</script>
