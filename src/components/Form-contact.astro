---
import { useI18n } from '../i18n';
const { translate, currentLang } = useI18n(Astro);
---
<!-- Main Content -->
<section class="relative px-4 sm:px-10 py-20 lg:py-24">
    <input id="lang" type="hidden" value={currentLang}>
    <!-- Page Title -->
    <div class="text-center mb-16 animate-fade-in">
        <h1 class="text-4xl md:text-6xl font-bold text-white mb-4">
            <span class="gradient-text">{translate('contact.title')}</span>
        </h1>
        <p class="text-xl text-gray-300">
            {translate('contact.subtitle')} <strong>{translate('contact.subtitle2')}</strong>
        </p>
    </div>

    <div class="flex flex-col md:flex-row  justify-between gap-10 max-w-7xl m-auto">
        <div class="w-full md:w-5/12 py-0 md:py-4 px-4 animate-slide-up">
            <div class="contact-info flex flex-col gap-5">
                <p>
                    <strong class="font-semibold text-lg">{translate('contact.info.schedule.title')}</strong><br>
                    <span class="text-gray-300">{translate('contact.info.schedule.text')}</span>
                </p>
                <p>
                    <strong class="font-semibold text-lg">{translate('contact.info.email.title')}</strong><br>
                    <span class="text-gray-300">
                        contact@trendyup.es
                    </span>
                </p>
                <p>
                    <strong class="font-semibold text-lg">{translate('contact.info.phone.title')}</strong><br>
                    <span class="text-gray-300">
                        913 076 630
                    </span>
                </p>
                <p>
                    {translate('contact.info.message')}
                </p>
            </div>
        </div>
        <!-- Contact Form Section -->
        <div class="max-w-3xl w-full mx-auto mb-8">
            <div class="bg-white/10 backdrop-blur-lg rounded-3xl p-8 md:p-12 content-glow border border-white/20 animate-slide-up">

                <!-- Contact Form -->
                <form class="space-y-6" id="contactForm">

                    <div class="grid md:grid-cols-2 gap-6">
                        <!-- Name -->
                        <div class="space-y-2">
                            <label for="name_user" class="block text-white font-medium text-lg">
                                {translate('contact.form.name.label')}
                            </label>
                            <div class="relative">
                                <input type="text" id="name_user" name="name_user" required placeholder={String(translate('contact.form.name.placeholder'))}
                                    autocomplete="off"
                                    class="input-focus w-full px-6 py-4 bg-white/20 border border-white/30 rounded-2xl text-white placeholder-gray-300 text-lg focus:outline-none focus:border-blue-400 focus:bg-white/30">
                                <div class="absolute inset-y-0 right-0 flex items-center pr-6">
                                    <span class="text-blue-300 text-xl">👤</span>
                                </div>
                            </div>
                        </div>

                        <!-- Email -->
                        <div class="space-y-2">
                            <label for="email_user" class="block text-white font-medium text-lg">
                                {translate('contact.form.email.label')}
                            </label>
                            <div class="relative">
                                <input type="email" id="email_user" name="email_user" required autocomplete="off"
                                    placeholder={String(translate('contact.form.email.placeholder'))}
                                    class="input-focus w-full px-6 py-4 bg-white/20 border border-white/30 rounded-2xl text-white placeholder-gray-300 text-lg focus:outline-none focus:border-blue-400 focus:bg-white/30">
                                <div class="absolute inset-y-0 right-0 flex items-center pr-6">
                                    <span class="text-blue-300 text-xl">📧</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Message -->
                    <div class="space-y-2">
                        <label for="message_user" class="block text-white font-medium text-lg">
                            {translate('contact.form.message.label')}
                        </label>
                        <textarea id="message_user" name="message_user" required rows="6" autocomplete="off"
                            placeholder={String(translate('contact.form.message.placeholder'))}
                            class="input-focus w-full px-6 py-4 bg-white/20 border border-white/30 rounded-2xl text-white placeholder-gray-300 text-lg focus:outline-none focus:border-blue-400 focus:bg-white/30 resize-none"></textarea>
                    </div>

                    <p id="error-message" class="hidden text-center text-red-300 text-sm bg-red-500/20 p-4 rounded-xl border border-red-400/30">
                      
                    </p>
                    <!-- Submit Button -->
                    <button type="submit"
                        class="button-hover  w-full bg-gradient-to-r from-blue-500 via-purple-500 to-indigo-500 text-white font-bold text-xl py-5 px-8 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300/50">
                        <span class="flex items-center justify-center space-x-3">
                            <span>📤 {translate('contact.form.button')}</span>
                        </span>
                    </button>
                </form>

            </div>
        </div>
    </div>

</section>

<!-- Success Modal -->
<div id="successModal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 ">
    <!-- Overlay -->
    <div class="modal-overlay absolute inset-0 bg-black/60 backdrop-blur-sm"></div>

    <!-- Modal Content -->
    <div class="modal-content relative bg-white/10 backdrop-blur-lg rounded-3xl p-8 md:p-12 max-w-md w-full border border-white/20 shadow-2xl">
        <!-- Close Button -->
        <button onclick="closeSuccessModal()"
            class="absolute top-4 right-4 w-10 h-10 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 hover:rotate-90 transition-all duration-300 group"
            aria-label="Cerrar modal">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>

        <!-- Success Icon -->
        <div class="flex justify-center mb-4">
            <div class="text-2xl font-bold flex items-center">
                    <img src="/TrendyUp.png" class="size-14 opacity-85" alt="Icon TrendyUp">
                    <span class="bg-gradient-to-tr from-orange-400  to-purple-700 text-transparent bg-clip-text">Trendy</span><span class="gradient-text text-3xl">Up</span>
            </div>
        </div>

        <!-- Success Message -->
        <p class="text-purple-200 text-lg text-center leading-relaxed mb-8">
            {translate('contact.modal.success')}
        </p>

        <!-- Action Button -->
        <button onclick="closeSuccessModal()"
            class="w-full px-6 py-3 bg-blue-700 hover:bg-blue-800 rounded-full font-semibold transition-all transform hover:scale-105 shadow-lg">
            {translate('contact.modal.button')}
        </button>
    </div>
</div>

<!-- JavaScript -->
<script>

    const MESSAGES: Record<string, Record<string, string>> = {
        empty_fields: {
            es: "🚨 Por favor completa todos los campos",
            en: "🚨 Please fill in all fields",
            fr: "🚨 Veuillez remplir tous les champs",
            pt: "🚨 Por favor, preencha todos os campos"
        },
        invalid_email: {
            es: "🚨 Formato de email inválido",
            en: "🚨 Invalid email format",
            fr: "🚨 Format d'email invalide",
            pt: "🚨 Formato de e-mail inválido"
        },
        token_error: {
            es: "🚨 Ha ocurrido un error, intentarlo más tarde",
            en: "🚨 An error occurred, please try later",
            fr: "🚨 Une erreur est survenue, veuillez réessayer plus tard",
            pt: "🚨 Ocorreu um erro, tente novamente mais tarde"
        },
        sending: {
            es: "Enviando...",
            en: "Sending...",
            fr: "Envoi...",
            pt: "Enviando..."
        }
    };

    window.addEventListener('load', () => {

        const emailRegex = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/;
        const name_user = document.getElementById("name_user") as HTMLInputElement;
        const email_user = document.getElementById("email_user") as HTMLInputElement;
        const message_user = document.getElementById("message_user") as HTMLInputElement;
        const button = document.querySelector('button[type="submit"]') as HTMLButtonElement;
        const errormessage = document.getElementById("error-message") as HTMLDivElement;

        const form = document.getElementById("contactForm") as HTMLFormElement;
        if(!form)return

        // Contact form submission
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            const name = name_user.value.trim();
            const email = email_user.value.trim();
            const message = message_user.value.trim();
            
            await sendEmail(name, email, message)
        });

        async function sendEmail(name_user:string, email_user:string, textarea_user:string){
                const language = document.getElementById("lang") as HTMLInputElement;
                const originalText = button.innerHTML;
                button.innerHTML = `<span class="flex items-center justify-center space-x-2"><span class="animate-spin">⏳</span><span>${getMessage("sending", language.value)}</span></span>`;;
                button.disabled = true;

                const token = await getToken();

                // Basic validation
                if (name_user.length === 0 || email_user.length === 0 || textarea_user.length === 0) {
                    errormessage.classList.remove("hidden");
                    errormessage.textContent = getMessage("empty_fields", language.value);
                    button.innerHTML = originalText;
                    button.disabled = false;
                    return;
                }

                if (!emailRegex.test(email_user)) {
                    errormessage.classList.remove("hidden");
                    errormessage.textContent = getMessage("invalid_email", language.value);
                    button.innerHTML = originalText;
                    button.disabled = false;
                    return;
                }

                if (!token) {
                    errormessage.classList.remove("hidden");
                    errormessage.textContent = getMessage("token_error", language.value);
                    button.innerHTML = originalText;
                    button.disabled = false;
                    return;
                }

            const res = await fetch(`${import.meta.env.PUBLIC_API}/contact-mesagge`, 
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${token}`,
                    },
                    body: JSON.stringify({
                        name: name_user.toLowerCase().trim(),
                        email: email_user.toLowerCase().trim(),
                        textarea: textarea_user.toLowerCase().trim(),
                        locale:language.value.trim()
                    }),
                });
                const data = await res.json();

                if (!res.ok) {
                    errormessage.classList.remove("hidden");
                    errormessage.textContent = data.message;
                    button.innerHTML = originalText;
                    button.disabled = false;
                    return;
                }else{
                    button.innerHTML = originalText;
                    button.disabled = false;
                    showSuccessModal()
                }
            }

        async function getToken() {
                const res = await fetch(`${import.meta.env.PUBLIC_API}/token`);

                if (!res.ok) {
                    throw new Error("Error get token");
                }

                const data = await res.json();
                return data.token; // O la propiedad que te envíe el token
            }

        // Add entrance animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {
            entries.forEach((entry: IntersectionObserverEntry) => {
                if (entry.isIntersecting) {
                    (entry.target as HTMLElement).style.opacity = '1';
                    (entry.target as HTMLElement).style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);

        // Observe elements for animation
        const elementDiv =(document.querySelectorAll('.animate-slide-up') as NodeListOf<HTMLDivElement>)
        elementDiv.forEach(element => {
            element.style.opacity = '0';
            element.style.transform = 'translateY(30px)';
            element.style.transition = 'all 0.6s ease-out';
            observer.observe(element);
        });

        function showSuccessModal() {
            const modal = document.getElementById('successModal') as HTMLDivElement;
            modal.classList.remove('hidden');
            // Reset form
            form.reset();
            
            // Auto-close after 5 seconds
            setTimeout(() => {
                closeSuccessModal();
            }, 5000);
        }

        function closeSuccessModal() {
            const modal = document.getElementById('successModal') as HTMLDivElement;
            modal.classList.add('hidden');
            
            // Reset form
            form.reset();
        }

        function getMessage(key: string, locale: string = "es"): string {
            return MESSAGES[key]?.[locale] || MESSAGES[key]?.["en"] || "";
        }
    })

</script>