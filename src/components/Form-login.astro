---
import { useI18n } from '../i18n';
const { translate, currentLang } = useI18n(Astro);
---
<!-- Main Login Container -->
<div class="relative z-10 w-full max-w-md mx-auto animate-fade-in py-20">

    <!-- Login Card -->
    <div class="bg-white/10 backdrop-blur-lg rounded-3xl p-8 form-glow border border-white/20 animate-slide-up">
        <!-- Welcome Message -->
        <div class="text-center mb-8">
            <h1 class="text-3xl font-bold text-white mb-3">
                {translate('login.welcome.title')}
            </h1>
            <p class="text-lg text-gray-200">
                {translate('login.welcome.subtitle')}
            </p>
        </div>

        <!-- Login Form -->
        <form class="space-y-6" id="loginForm">
            <!-- Username/Email Field -->
            <div class="space-y-2">
                <label for="usuario" class="block text-white font-medium text-lg">
                    {translate('login.form.email.label')}
                </label>
                <div class="relative">
                    <input type="email" id="usuario" name="usuario" required autocomplete="off"
                        placeholder="JohnDoe@example.com"
                        class="input-focus w-full px-6 py-4 bg-white/20 border border-white/30 rounded-2xl text-white placeholder-gray-300 text-lg focus:outline-none focus:border-blue-400 focus:bg-opacity-30" />
                    <div class="absolute inset-y-0 right-0 flex items-center pr-6">
                        <span class="text-blue-300 text-xl">üë§</span>
                    </div>
                </div>
            </div>

            <!-- Password Field -->
            <div class="space-y-2">
                <label for="password" class="block text-white font-medium text-lg">
                    {translate('login.form.password.label')}
                </label>
                <div class="relative">
                    <input type="password" id="password" name="password" required autocomplete="off"
                        placeholder="Your password"
                        class="input-focus w-full px-6 py-4 pr-16 bg-white/20 border border-white/30 rounded-2xl text-white placeholder-gray-300 text-lg focus:outline-none focus:border-blue-400 focus:bg-opacity-30" />
                    <div class="absolute cursor-pointer inset-y-0 right-0 flex items-center pr-6 space-x-2">
                        <span class="password-toggle text-blue-300 text-xl" onclick="togglePassword()"
                            id="passwordToggle">üëÅÔ∏è</span>
                    </div>
                </div>
                
            </div>
            <div class="mb-4 text-purple-200 text-xs flex">
                <span>üí°</span>
                <p>{translate('login.form.tip.text')}</p>
            </div>
            <!-- Remember Me & Forgot Password -->
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3"></div>
                <a href="#" class="link-hover text-blue-300 hover:text-blue-200 font-medium"
                    onclick="showForgotPassword()">
                    {translate('login.form.forgotPassword')}
                </a>
            </div>

            <!-- Error Message -->
            <div id="errorMessage" class="hidden bg-red-500/20 border border-red-400/30 rounded-xl p-4">
                <div class="flex items-center space-x-3">
                    <span class="text-red-300 text-xl">‚ùå</span>
                    <p class="text-red-100 text-sm" id="errorText">
                        {translate('login.form.error.text')}
                    </p>
                </div>
            </div>

            <!-- Login Button -->
            <button type="submit"
                class="button-hover w-full opacity-75 hover:opacity-100 bg-gradient-to-br from-slate-800 via-purple-900 to-slate-900 text-white font-bold text-xl py-5 px-8 rounded-2xl focus:outline-none focus:ring-4 focus:ring-blue-300 focus:ring-opacity-50"
                id="loginButton">
                <span class="flex items-center justify-center space-x-3">
                    <span>üîê {translate('login.form.button.text')}</span>
                </span>
            </button>
        </form>
    </div>
</div>

<!-- Forgot Password Modal -->
<!-- Se deja hidden -->
<div id="forgotPasswordModal" class="hidden fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
    <div class="bg-white/10 backdrop-blur-lg rounded-3xl p-8 max-w-md w-full border border-white/20">
        <div class="text-center mb-6">
            <div class="text-4xl mb-4">üîë</div>
            <h2 class="text-2xl font-bold text-white mb-2">
                {translate('forgotpassword.title')}
            </h2>
            <p class="text-gray-300">
                {translate('forgotpassword.subtitle')}
            </p>
        </div>

        <form id="forgotPasswordForm" class="space-y-4">
            <div>
                <label for="resetEmail" class="block text-white font-medium mb-2">{translate('forgotpassword.form.email.label')}</label>
                <input type="email" id="resetEmail" autocomplete="off" required placeholder="JohnDoe@email.com"
                    class="w-full px-4 py-3 bg-white/20 border border-white/30 rounded-xl text-white placeholder-gray-300 focus:outline-none focus:border-blue-400" />
            </div>

            <p id="message3" class="text-center text-sm mt-2"></p>

            <div class="flex gap-3">
                <button type="button" onclick="closeForgotPassword()" id="cancelReset"
                    class="flex-1 px-4 py-3 bg-gray-500/50 text-white rounded-xl hover:bg-opacity-70 transition-colors">
                    {translate('forgotpassword.form.buttons.cancel')}
                </button>
                <button id="btnResetPw" type="button"
                    class="flex-1 px-4 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-xl hover:scale-105 transform transition-all duration-300">
                    {translate('forgotpassword.form.buttons.submit')}
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // Login form submission
    window.addEventListener('load', () => {

    const usuarioInput = document.getElementById("usuario") as HTMLInputElement;
    const passwordInput = document.getElementById("password") as HTMLInputElement;
    const btnLogin = document.getElementById("loginButton") as HTMLButtonElement;
    const formGlow = document.querySelector(".form-glow") as HTMLDivElement;
    const resetPwInput = document.getElementById("resetEmail") as HTMLInputElement;
    const btnResetPw = document.getElementById("btnResetPw") as HTMLButtonElement;
    const btnResetPw2 = document.querySelector("#cancelReset")as HTMLButtonElement;
    const messageEl = document.getElementById("message3") as HTMLParagraphElement;

    const errorDiv = document.getElementById("errorMessage") as HTMLDivElement;
    const errorText = document.getElementById("errorText") as HTMLParagraphElement;
    const originalText = btnLogin.innerHTML;

    const emailRegex = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/;
    // Show loading state

    const form = document.getElementById("loginForm");
    if(!form)return

    form.addEventListener("submit", async function (e) {
            e.preventDefault();

            const email = usuarioInput.value.trim();
            const password = passwordInput.value.trim();

            // Basic validation
            if (email.length === 0 || password.length === 0) {
                showError("Por favor completa todos los campos");
                return;
            }

            if (!emailRegex.test(email)) {
                showError("Formato de email inv√°lido");
                return;
            }

            if (password.length < 6) {
                showError("La contrase√±a debe tener minimo 6 car√°cteres");
                return;
            }

            btnLogin.innerHTML =
                '<span class="flex items-center justify-center space-x-2"><span class="animate-spin">‚è≥</span><span>Iniciando sesi√≥n...</span></span>';
            btnLogin.disabled = true;
            const token = await getToken();
            await login(token, email, password)
        });

    async function login(token:string,email:string,password:string) {
        try {
                const res = await fetch(`${import.meta.env.PUBLIC_API}/login`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${token}`,
                    },
                    body: JSON.stringify({ email, password }),
                });

                const data = await res.json();
                if (!res.ok) {
                  
                    showError("Usuario o contrase√±a incorrectos");
                    return;
                }
                localStorage.setItem("access_token", data.access_token);
                localStorage.setItem("userName", data.user);

                showSuccess("¬°Bienvenido! Redirigiendo a tu panel...");
                setTimeout(() => {
                    window.location.href = "/dashboard"; // O tu ruta real
                }, 1500);
            } catch (err) {
                
                showError("Ocurri√≥ un error, intentarlo mas tarde");
                formGlow.style.animation ="shake 0.5s ease-in-out";
                setTimeout(() => {
                    formGlow.style.animation = "";
                }, 500);
            } finally {
                btnLogin.innerHTML = originalText;
                btnLogin.disabled = false;
            }
    }

    async function getToken() {
        const res = await fetch(`${import.meta.env.PUBLIC_API}/token`);

        if (!res.ok) {
            throw new Error("Error al obtener el token");
        }

        const data = await res.json();
        return data.token; // O la propiedad que te env√≠e el token
    }

    btnResetPw.addEventListener("click", async function (e) {
            e.preventDefault();

            const originalText = btnResetPw.innerHTML;
            btnResetPw.innerHTML =
                '<span class="flex items-center justify-center space-x-2"><span class="animate-spin">‚è≥</span><span>Enviando...</span></span>';
            btnResetPw.disabled = true;
            btnResetPw2.disabled = true;

            if (!resetPwInput.value) {
                messageEl.textContent = "Ingresa email";
                messageEl.className =
                    "text-red-300 text-center text-sm bg-red-500/20 p-4 rounded-xl border border-red-400/30";
                btnResetPw.innerHTML = originalText;
                btnResetPw.disabled = false;
                btnResetPw2.disabled = false;
                resetPwInput.value = "";
                return;
            }

            try {
                const token = await getToken();
                const res = await fetch(
                    `${import.meta.env.PUBLIC_API}/recovery-password`,
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Authorization: `Bearer ${token}`,
                        },
                        body: JSON.stringify({
                            email: resetPwInput.value,
                        }),
                    },
                );
                const data = await res.json();
                if (!res.ok) {
                    messageEl.textContent = data.message;
                    messageEl.className =
                        "text-red-300 text-center text-sm bg-red-500/20 p-4 rounded-xl border border-red-400/30";
                    btnResetPw.innerHTML = originalText;
                    btnResetPw.disabled = false;
                    btnResetPw2.disabled = false;
                    resetPwInput.value = "";
                    return;
                }
                // Simulate form processing
                setTimeout(() => {
                    // Reset button
                    btnResetPw.innerHTML = originalText;
                    btnResetPw.disabled = false;
                    btnResetPw2.disabled = false;
                }, 2000);
                messageEl.textContent = data.message;
                messageEl.className =
                    "text-green-600 text-center text-sm bg-green-300/20 p-4 rounded-xl";
                btnResetPw.innerHTML = originalText;
                btnResetPw.disabled = false;
                btnResetPw2.disabled = false;
                resetPwInput.value = "";
                return;
            } catch (err) {
                messageEl.textContent = 'Ocurri√≥ un error, intentar mas tarde';
                messageEl.className =
                    "text-red-300 text-center text-sm bg-red-500/20 p-4 rounded-xl border border-red-400/30";
                btnResetPw.innerHTML = originalText;
                btnResetPw.disabled = false;
                resetPwInput.value = "";
                return;
            }
        })

    // Show error message
    function showError(message:string) {
        errorText.textContent = message;
        errorDiv.classList.remove("hidden");

        setTimeout(() => {
            errorDiv.classList.add("hidden");
        }, 5000);
    }

    // Show success message
    function showSuccess(message:string) {
        errorText.textContent = message;
        errorDiv.className =
            "bg-green-500/20 border border-green-400/30 rounded-xl p-4";
        (errorDiv.querySelector("span")as HTMLSpanElement).textContent = "‚úÖ";
        (errorDiv.querySelector("span")as HTMLSpanElement).className = "text-green-300 text-xl";
        (errorDiv.querySelector("p")as HTMLParagraphElement).className = "text-green-100 text-sm";
        errorDiv.classList.remove("hidden");
    }
    });
</script>
<!-- JavaScript -->
<script is:inline>
    // Toggle password visibility
    function togglePassword() {
        const passwordInput = document.getElementById("password");
        const toggleIcon = document.getElementById("passwordToggle");

        if (passwordInput.type === "password") {
            passwordInput.type = "text";
            toggleIcon.textContent = "üôà";
        } else {
            passwordInput.type = "password";
            toggleIcon.textContent = "üëÅÔ∏è";
        }
    }

    // Show forgot password modal
    function showForgotPassword() {
        document
            .getElementById("forgotPasswordModal")
            .classList.remove("hidden");
    }

    // Close forgot password modal
    function closeForgotPassword() {
        document.getElementById("forgotPasswordModal").classList.add("hidden");
    }

    // Forgot password form submission
    document
        .getElementById("forgotPasswordForm")
        .addEventListener("submit", function (e) {
            e.preventDefault();
            const email = document.getElementById("resetEmail").value;

            if (!email) {
                alert("Por favor ingresa tu email");
                return;
            }

            alert(`Se ha enviado un enlace de recuperaci√≥n a ${email}`);
            closeForgotPassword();
        });

    // Input animations
    const inputs = document.querySelectorAll("input");
    inputs.forEach((input) => {
        input.addEventListener("focus", function () {
            this.parentElement.style.transform = "scale(1.02)";
        });

        input.addEventListener("blur", function () {
            this.parentElement.style.transform = "scale(1)";
        });
    });

    // Close modal when clicking outside
    document
        .getElementById("forgotPasswordModal")
        .addEventListener("click", function (e) {
            if (e.target === this) {
                closeForgotPassword();
            }
        });
</script>
